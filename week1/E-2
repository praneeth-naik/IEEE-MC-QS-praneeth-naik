class Solution {
public:
    void merge(vector<int>& arr, int low, int high, int mid){
        vector<int> temp;
        int left = low, right = mid+1;
        while(left<=mid&&right<=high){
            if(arr[left]<=arr[right]){
                temp.push_back(arr[left]);
                left++;
            } else {
                temp.push_back(arr[right]);
                right++;
            }
        }
        while(left<=mid){
            temp.push_back(arr[left]);
            left++;
        }
        while(right<=high){
            temp.push_back(arr[right]);
            right++;
        }
        for (int i = low; i <= high; i++)
            arr[i] = temp[i - low];
    }
    void mergeSort(vector<int>& arr, int low, int high){
        if(low>=high)
            return;
        int mid = (low+high)/2;
        mergeSort(arr, low, mid);
        mergeSort(arr, mid+1, high);
        merge(arr, low, high, mid);
    }
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
        vector<int> record = nums;
        mergeSort(nums, 0, nums.size()-1);
        unordered_map<int, int> mp;
        int count = 0, countSame=0;
        for(int i=0; i<nums.size()-1; i++){
            countSame++;
            if(nums[i]<nums[i+1]){
                mp[nums[i]]=count;
                count+=countSame;
                countSame = 0;
            }
        }
        mp[nums[nums.size()-1]] = count;
        for(int i=0; i<record.size(); i++){
            nums[i] = mp[record[i]];
        }
        return nums;
    }
};
